---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { Image } from 'astro:assets'; // Użyjemy Image dla optymalizacji

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  return blogEntries.map(entry => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Funkcja formatująca datę
const formatDate = (date: Date) => {
  return date.toLocaleDateString('pl-PL', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}
---
<Layout title={entry.data.title} description={entry.data.description} image={entry.data.heroImage}>
  <article class="container mx-auto px-4 py-16 max-w-3xl">
    <header class="mb-12 text-center">
      <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold text-foreground mb-4">{entry.data.title}</h1>
      <p class="text-md text-muted-foreground mb-4">
        Opublikowano: {formatDate(entry.data.pubDate)}
      </p>
      {entry.data.tags && entry.data.tags.length > 0 && (
        <div class="flex flex-wrap gap-2 justify-center">
          {entry.data.tags.map(tag => (
            <span class="inline-block bg-secondary text-secondary-foreground text-xs font-medium px-3 py-1 rounded-full">
              {tag} {/* Usunięto # dla czystszego wyglądu */} 
            </span>
          ))}
        </div>
      )}
    </header>

    {entry.data.heroImage && (
      <div class="mb-12 rounded-lg overflow-hidden border border-border">
        <img 
          src={entry.data.heroImage}
          alt="" 
          class="w-full h-auto max-h-[500px] object-cover" 
        />
      </div>
    )}

    <div class="prose prose-invert max-w-none 
                prose-headings:text-foreground prose-headings:font-semibold
                prose-a:text-primary hover:prose-a:underline 
                prose-blockquote:border-l-4 prose-blockquote:border-border prose-blockquote:pl-4 prose-blockquote:text-muted-foreground prose-blockquote:italic
                prose-strong:text-foreground 
                prose-code:text-sm prose-code:bg-secondary prose-code:px-1.5 prose-code:py-0.5 prose-code:rounded-sm prose-code:font-normal
                prose-img:rounded-md prose-img:border prose-img:border-border">
      <Content />
    </div>

    <hr class="my-16 border-border" />

    <div class="text-center">
      <a href="/blog" class="inline-flex items-center text-primary hover:underline">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Wróć do Bloga
      </a>
    </div>
  </article>
</Layout>

<style is:global>
  /* Style dla elementów generowanych z Markdown - teraz używamy klas prose-* */
  .prose code::before, .prose code::after {
    content: none; /* Upewnijmy się, że nie ma dodatkowych znaków */
  }
  .prose pre {
    /* Zastąpiono @apply bezpośrednim stylem CSS, aby uniknąć błędu Tailwind */
    background-color: var(--secondary);
    padding: 1rem;
    border-radius: 0.5rem; /* rounded-lg */
    border: 1px solid var(--border);
    font-size: 0.875rem; /* text-sm */
    overflow-x: auto; /* Dodano dla długich linii kodu */
  }
  /* Usunięto specyficzne style dla .prose img, bo są w klasach prose-img */
  /* Usunięto style .y2k-tag */
</style> 